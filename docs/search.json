[
  {
    "objectID": "lectures/lecture9.html#title-slide",
    "href": "lectures/lecture9.html#title-slide",
    "title": "EGH445 Modern Control",
    "section": "Title Slide",
    "text": "Title Slide\n\n\n\n\n\nDiscrete-Time Control Design 3\n\n\nOptimal Control\n\n\n\nDr Guilherme Froes Silva School of Electrical Engineering & Robotics Queensland University of Technology\n\n\nEGH445 - Modern Control\n\n\n Website \n\n\nConsultation: GP-S1111 Email: g.froessilva@qut.edu.au"
  },
  {
    "objectID": "lectures/lecture9.html#quick-review-of-the-content-so-far",
    "href": "lectures/lecture9.html#quick-review-of-the-content-so-far",
    "title": "EGH445 Modern Control",
    "section": "Quick review of the content so far",
    "text": "Quick review of the content so far\n\nContinuous-time system: \n\\begin{align}\\dot{x}(t) &= f(x, u), \\\\ y(t) &= g(x, u) \\end{align}\n\n\n\nLinearised system: \n\\begin{align} \\dot{x}(t) &= Ax(t) + Bu(t), \\\\ y(t) &= Cx(t) + Du(t), \\end{align}\n\nwhere the A, B, C, D are the matrices \nA = \\frac{\\partial f}{\\partial x} \\bigg|_{\\bar x, \\bar u}\nB = \\frac{\\partial f}{\\partial u} \\bigg|_{\\bar x, \\bar u}\nC = \\frac{\\partial g}{\\partial x} \\bigg|_{\\bar x, \\bar u}\nD = \\frac{\\partial g}{\\partial u} \\bigg|_{\\bar x, \\bar u}\n\n\n\nDiscrete-time system: \n\\begin{align} x(kT+T) &= Gx(kT) + Hu(kT), \\\\ y(kT) &= Cx(kT) + Du(kT), \\end{align}\n\nwhere \nG = e^{AT}, \\quad H = \\left[\\int_0^T e^{A\\tau} d\\tau\\right] B \\quad \\left(\\text{or, if $A$ is invertible, } H = A^{-1} (G-I)B\\right)\n\n\n\nState-feedback controller: \nu(k) = -Kx(kT)\n\nwhere K is the feedback gain matrix that is designed to arbitrarily move the poles of the closed-loop system \nx(kT+T) = (G-HK)x(kT)\n\nfor example, by equating the characteristic polynomial of the closed-loop system to a desired polynomial, \n\\det(zI - (G-HK)) = (z - z_1)(z - z_2) \\cdots (z - z_n)\n\n\n\n\n\n\n\n\n\nImportant\n\n\nThe solution exists if the system is controllable, i.e. if the controllability matrix \\mathcal{C} = \\left[H,\\; GH,\\; G^2H,\\; \\ldots,\\; G^{n-1}H\\right] has full rank (\\text{rank}(\\mathcal{C})=n).\n\n\n\n\n\nHow do you choose the poles?\n\n\n\nt_s - settling time\nt_r - rise time\n\\%OS - percent overshoot\n\\omega_n - natural frequency\n\\zeta - damping ratio (or through percent overshoot)\n\n\n\n\\zeta = \\dfrac{\\ln(\\%OS/100)}{\\sqrt{\\pi^2 + \\ln^2(\\%OS/100)}}\n\\omega_n = \\frac{4}{\\zeta t_s}\ns_{1,2} = -\\zeta \\omega_n \\pm j \\omega_n \\sqrt{1-\\zeta^2}\nz_{1,2} = e^{s_{1,2}T}\n\n\n\n\nWe also saw the Internal Model Principle (e.g. Integral Action) to reject disturbances (or follow references) with a known model (e.g. a step input, a ramp input, a sinusoidal input, etc.). Those still relied on the pole placement approach."
  },
  {
    "objectID": "lectures/lecture9.html#pole-placement",
    "href": "lectures/lecture9.html#pole-placement",
    "title": "EGH445 Modern Control",
    "section": "Pole placement",
    "text": "Pole placement\n\nWorks well for:\n\nSISO systems (Single Input Single Output)\nLow order systems (2nd order or when 2nd order dominant, etc.)\n\n\n\nDoes not work well for:\n\nHigh-order systems (4th order, 5th order, etc.)\nMIMO systems (Multiple Input Multiple Output)\nStiff systems (e.g. with very different time constants, e.g. 1ms and 1s)\nHighly nonlinear systems (i.e. linearisation is only valid close to the E.P.)"
  },
  {
    "objectID": "lectures/lecture9.html#section",
    "href": "lectures/lecture9.html#section",
    "title": "EGH445 Modern Control",
    "section": "",
    "text": "Example of a simple MIMO system: \n\\begin{align} x(kT+T) &= \\begin{bmatrix} 1 & 0.1 \\\\ 0 & 0.8 \\end{bmatrix} x(kT) + \\begin{bmatrix} 1 & 0 \\\\ 0 & 1 \\end{bmatrix} u(kT)\n\\end{align}\n\nWe want to place the poles at 0.4 and 0.6, by using u(kT) = -Kx(kT), where K = \\begin{bmatrix} k_1 & k_2 \\\\ k_3 & k_4\\end{bmatrix}.\n\nThe characteristic polynomial is given by: \n\\begin{align}\n&\\det(zI - (G-HK)) = \\det\\left(\\begin{bmatrix} z-1+k_1 & k_2-0.1 \\\\ k_3 & z-0.8+k_4\\end{bmatrix}\\right) \\\\\n&= z^2 + (k_1 + k_4 - 1.8)z + (0.1k_3 - k_4 - 0.8k_1 + k_1k_4 - k_2k_3 + 0.8)\n\\end{align}\n\n\n\nThe desired characteristic polynomial is given by: \n(z-0.4)(z-0.6) = z^2 - 1z + 0.24\n\n\n\nWhen we equate the coefficients, we get: \n\\begin{cases}\n(k_1 + k_4 - 1.8) = -1 \\\\\n0.1k_3 - k_4 - 0.8k_1 + k_1k_4 - k_2k_3 + 0.8 = 0.24\n\\end{cases}\n\n\n\n\n\n\n\n\n\nImportant\n\n\nNote that we have two equations and four unknowns. This means that we have degrees of freedom in the design. We can choose two of the four variables arbitrarily, and then solve for the other two.\n\n\n\n\n\nThis seems like a good idea, but it is not. The problem is that differente choices of K, even if they lead to the same eigenvalues, can lead to different eigenvectors. The closed-loop system’s eigenvectors directyl affect the response of the system.\n\n\nLet k_2 = k_3 = 0 and consider the following two cases of gains matrices K_1 and K_2, both of which lead assign the closed-loop eigenvalues to the desired values: \nK_1 = \\begin{bmatrix} 0.6 & 0 \\\\ 0 & 0.2 \\end{bmatrix}, \\quad K_2 = \\begin{bmatrix} 0.4 & 0 \\\\ 0 & 0.4 \\end{bmatrix}\n\nBoth of which lead to the same eigenvalues we wanted. But let’s simulate the system with both K_1 and K_2.\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport control as ctrl\n# from scipy.signal import lti, step # Removed unused import\n\n# Create the system matrices\nA = np.array([[1, 0.1], [0, 0.8]])\nB = np.array([[1, 0], [0, 1]])\nC = np.array([[1, 0], [0, 1]]) # Assuming C outputs the state directly for this example\nD = np.array([[0, 0], [0, 0]])\nK1 = np.array([[0.6, 0], [0, 0.2]])  # Updated K1\nK2 = np.array([[0.4, 0], [0, 0.4]])  # Updated K2\nG1 = A - B @ K1\nG2 = A - B @ K2\n\n# Create the closed-loop LTI systems (using G1, G2 as the new 'A' matrices)\n# Note: We don't need B for initial response, but control.ss requires it.\n# We'll use the original B, C, D for consistency, though B and D aren't used in initial_response.\nsys1 = ctrl.ss(G1, B, C, D, 0.1) # Using dt=0.1 based on context\nsys2 = ctrl.ss(G2, B, C, D, 0.1) # Using dt=0.1 based on context\n\n# Simulate for initial condition x0 = [1, 0]\nx0 = np.array([1, 0])\nt_end = 1.5 # Reduced simulation time for clarity\nt = np.arange(0, t_end, 0.1) # Time vector with dt=0.1\nt1, y1 = ctrl.initial_response(sys1, T=t, X0=x0)\nt2, y2 = ctrl.initial_response(sys2, T=t, X0=x0)\n\nplt.figure(figsize=(10, 5))\nplt.plot(t1, y1[0, :], label='K1 - x1')\nplt.plot(t1, y1[1, :], label='K1 - x2')\nplt.plot(t2, y2[0, :], label='K2 - x1', linestyle='--')\nplt.plot(t2, y2[1, :], label='K2 - x2', linestyle='--')\nplt.title('Initial Condition Response ($x_0=[1, 0]^T$) with Different K Matrices') # Corrected title\nplt.xlabel('Time (steps * dt)') # Adjusted label if dt is used\nplt.ylabel('State Values') # Changed label as C=I\nplt.legend()\nplt.grid(True) # Added grid\nplt.show()"
  },
  {
    "objectID": "lectures/lecture9.html#the-discrete-time-optimal-control-problem",
    "href": "lectures/lecture9.html#the-discrete-time-optimal-control-problem",
    "title": "EGH445 Modern Control",
    "section": "The Discrete-Time Optimal Control Problem",
    "text": "The Discrete-Time Optimal Control Problem\nSystem Dynamics \nx(kT+T) = Gx(kT) + Hu(kT)\n\nCost Function / Performance Index\n\nJ = \\sum_{k=0}^{\\infty} \\left( x(kT)^T Q x(kT) + u(kT)^T R u(kT) \\right)\n\nWhere Q\\succeq 0 and R\\succ 0.\n\n\nA\\succeq 0 means that A is positive semi-definite, i.e. x^T A x \\geq 0 for all x \\in \\mathbb{R}^n.\nA\\succ 0 means that A is positive definite, i.e. x^T A x &gt; 0 for all x \\in \\mathbb{R}^n and x \\neq 0."
  },
  {
    "objectID": "lectures/lecture9.html#integral-action",
    "href": "lectures/lecture9.html#integral-action",
    "title": "EGH445 Modern Control",
    "section": "Integral Action",
    "text": "Integral Action\nTo reject constant disturbances, we can augment the system[cite: 14].\nDefine the augmented state vector z \\triangleq \\begin{bmatrix} x \\\\ q \\end{bmatrix}^T, then[cite: 20]:\n\nz(k_T+T) = \\underbrace{\\begin{bmatrix} G & 0_{n \\times p} \\\\ C & I_{p \\times p} \\end{bmatrix}}_{G_z} z(k_T) + \\underbrace{\\begin{bmatrix} H \\\\ 0_{p \\times m} \\end{bmatrix}}_{H_z} u(k_T)\n\nWhere q(k_T+T) = q(k_T) + y(k_T)[cite: 19]."
  },
  {
    "objectID": "lectures/lecture9.html#code-example",
    "href": "lectures/lecture9.html#code-example",
    "title": "EGH445 Modern Control",
    "section": "Code Example",
    "text": "Code Example\nConsidering m=1, k=1, b=1, y_0=1[cite: 9].\n# Example Python Code\nm = 1.0\nk = 1.0\nb = 1.0\n\n\n# Discretisation (Example from slides [cite: 42])\n# x_k+T = [[0.9952, 0.0950], [-0.0950, 0.9002]]*x_k + [[0.0048], [0.0950]]*u_k\n# y_k = [1, 0]*x_k"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "EGH445 Modern Control",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "2025/week9.html#diversity-in-stem",
    "href": "2025/week9.html#diversity-in-stem",
    "title": "EGH445 Modern Control",
    "section": "Diversity in STEM",
    "text": "Diversity in STEM"
  },
  {
    "objectID": "2025/week9.html#diversity-in-stem-1",
    "href": "2025/week9.html#diversity-in-stem-1",
    "title": "EGH445 Modern Control",
    "section": "Diversity in STEM",
    "text": "Diversity in STEM"
  }
]